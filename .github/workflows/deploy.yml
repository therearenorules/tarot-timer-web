name: 🚀 타로 타이머 모바일 앱 배포 파이프라인

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_platform:
        description: '빌드 플랫폼 선택'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - ios
          - android
      deploy_to_store:
        description: '앱스토어 자동 제출'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  EXPO_CLI_VERSION: 'latest'

jobs:
  # 코드 품질 검사
  quality-check:
    name: 🔍 코드 품질 검사
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 의존성 설치
        run: npm ci

      - name: 🏥 Expo Doctor 검사
        run: npx expo-doctor

      - name: 🧹 린트 검사
        run: npm run lint || echo "린트 설정이 없습니다"

      - name: 🧪 타입 검사
        run: npx tsc --noEmit || echo "TypeScript 설정 확인 필요"

  # 개발 빌드 (develop 브랜치)
  build-development:
    name: 🛠️ 개발 빌드
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 의존성 설치
        run: npm ci

      - name: 🔧 Expo CLI 설정
        uses: expo/expo-github-action@v8
        with:
          expo-version: ${{ env.EXPO_CLI_VERSION }}
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🏗️ 개발 빌드 생성
        run: |
          npm run dev:env
          eas build --platform all --profile development --non-interactive

  # 프리뷰 빌드 (main 브랜치)
  build-preview:
    name: 🎯 프리뷰 빌드
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 의존성 설치
        run: npm ci

      - name: 🔧 Expo CLI 설정
        uses: expo/expo-github-action@v8
        with:
          expo-version: ${{ env.EXPO_CLI_VERSION }}
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🏗️ 프리뷰 빌드 생성
        run: |
          npm run prod:env
          eas build --platform all --profile preview --non-interactive

  # 프로덕션 빌드 및 배포 (태그 기반)
  build-production:
    name: 🚀 프로덕션 빌드 및 배포
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    outputs:
      ios-build-url: ${{ steps.build.outputs.ios-build-url }}
      android-build-url: ${{ steps.build.outputs.android-build-url }}

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 의존성 설치
        run: npm ci

      - name: 🔧 Expo CLI 설정
        uses: expo/expo-github-action@v8
        with:
          expo-version: ${{ env.EXPO_CLI_VERSION }}
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🏗️ 프로덕션 빌드 생성
        id: build
        run: |
          npm run prod:env

          # 플랫폼별 빌드 실행
          if [ "${{ github.event.inputs.build_platform }}" = "ios" ] || [ "${{ github.event.inputs.build_platform }}" = "all" ] || [ "${{ github.event.inputs.build_platform }}" = "" ]; then
            echo "🍎 iOS 빌드 시작..."
            eas build --platform ios --profile production-ios --non-interactive
          fi

          if [ "${{ github.event.inputs.build_platform }}" = "android" ] || [ "${{ github.event.inputs.build_platform }}" = "all" ] || [ "${{ github.event.inputs.build_platform }}" = "" ]; then
            echo "🤖 Android 빌드 시작..."
            eas build --platform android --profile production-android --non-interactive
          fi

  # 앱스토어 자동 제출
  submit-to-stores:
    name: 📱 앱스토어 제출
    runs-on: ubuntu-latest
    needs: build-production
    if: |
      (startsWith(github.ref, 'refs/tags/v') ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_store == 'true'))

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 의존성 설치
        run: npm ci

      - name: 🔧 Expo CLI 설정
        uses: expo/expo-github-action@v8
        with:
          expo-version: ${{ env.EXPO_CLI_VERSION }}
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🍎 iOS App Store 제출
        if: github.event.inputs.build_platform != 'android'
        run: eas submit --platform ios --latest --non-interactive
        continue-on-error: true

      - name: 🤖 Google Play Store 제출
        if: github.event.inputs.build_platform != 'ios'
        run: eas submit --platform android --latest --non-interactive
        continue-on-error: true

  # OTA 업데이트 배포
  deploy-ota-update:
    name: 📡 OTA 업데이트 배포
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      !startsWith(github.ref, 'refs/tags/') &&
      contains(github.event.head_commit.message, '[ota]')

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4

      - name: 📦 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 의존성 설치
        run: npm ci

      - name: 🔧 Expo CLI 설정
        uses: expo/expo-github-action@v8
        with:
          expo-version: ${{ env.EXPO_CLI_VERSION }}
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📡 OTA 업데이트 배포
        run: |
          npm run prod:env
          eas update --channel production --message "${{ github.event.head_commit.message }}" --non-interactive

  # 릴리스 노트 생성
  create-release-notes:
    name: 📝 릴리스 노트 생성
    runs-on: ubuntu-latest
    needs: [build-production, submit-to-stores]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📋 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 릴리스 노트 생성
        id: release-notes
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git describe --abbrev=0 --tags $TAG^ 2>/dev/null || echo "")

          echo "## 🎉 타로 타이머 $TAG 출시" > release-notes.md
          echo "" >> release-notes.md
          echo "### 📱 다운로드" >> release-notes.md
          echo "- 🍎 [iOS App Store](https://apps.apple.com/app/tarot-timer)" >> release-notes.md
          echo "- 🤖 [Google Play Store](https://play.google.com/store/apps/details?id=com.tarottimer.app)" >> release-notes.md
          echo "" >> release-notes.md

          if [ -n "$PREV_TAG" ]; then
            echo "### 📋 변경사항 ($PREV_TAG...$TAG)" >> release-notes.md
            git log --pretty=format:"- %s" $PREV_TAG...$TAG >> release-notes.md
          else
            echo "### 📋 주요 기능" >> release-notes.md
            echo "- 🕰️ 24시간 타로 타이머" >> release-notes.md
            echo "- 🎴 타로 카드 기록 시스템" >> release-notes.md
            echo "- 📔 일기 작성 기능" >> release-notes.md
            echo "- 🌍 다국어 지원" >> release-notes.md
            echo "- 📱 크로스 플랫폼 지원" >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "### 🔧 기술 정보" >> release-notes.md
          echo "- **버전**: $TAG" >> release-notes.md
          echo "- **빌드 날짜**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
          echo "- **커밋**: ${GITHUB_SHA:0:7}" >> release-notes.md

      - name: 🎉 GitHub 릴리스 생성
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: 타로 타이머 ${{ github.ref_name }}
          body_path: release-notes.md
          draft: false
          prerelease: false

  # 알림 및 모니터링
  notify-completion:
    name: 📢 배포 완료 알림
    runs-on: ubuntu-latest
    needs: [build-production, submit-to-stores, create-release-notes]
    if: always() && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📊 배포 결과 확인
        run: |
          echo "🎯 배포 파이프라인 완료"
          echo "📦 빌드 상태: ${{ needs.build-production.result }}"
          echo "📱 스토어 제출: ${{ needs.submit-to-stores.result }}"
          echo "📝 릴리스 노트: ${{ needs.create-release-notes.result }}"

          if [ "${{ needs.build-production.result }}" = "success" ]; then
            echo "✅ 빌드 성공"
          else
            echo "❌ 빌드 실패"
          fi